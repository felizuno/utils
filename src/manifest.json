{
  "functions": {
    "deep_has.js": "{\n  name: 'Deep Has',\n  author: 'Kevin Ewing',\n  client: true,\n  node: true,\n  func: function(src, accessString) {\n    return accessString\n      .replace(/\\[/g, '.') // can these two replaces be done with a regex\n      .replace(/\\]/g, '') // matching two things?\n      .split('.')\n      .reduce(function(l, v, i) {\n        return (l && l.hasOwnProperty(v)) ? l[v] : undefined;\n      }, src);\n  },\n  stubs: {\n    src1: { first: { second: [{third: 0}]} },\n    src2: { first: { second: [{third: false}]} },\n    src3: { first: { second: [{third: null}]} },\n    src4: { first: { second: [0, 0, {third: 1}]} },\n    src5: [{ first: { second: [{third: 1}]} }]\n  },\n  tests: [\n    function() {\n      return this.func(stubs.src1, 'first.second[0].third') === 0;\n    },\n    function() {\n      return this.func(stubs.src2, 'first.second[0].third') === false;\n    },\n    function() {\n      return this.func(stubs.src3, 'first.second[0].third') === null;\n    },\n    function() {\n      return this.func(stubs.src3, 'first.second[2].third') === 1;\n    },\n    function() {\n      return this.func(stubs.src3, '[0].first.second[0].third') === 1;\n    },\n  ]\n};\n"
  },
  "polyfills": {
    "array_reduce.js": "// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: http://es5.github.io/#x15.4.4.21\nif (!Array.prototype.reduce) {\n  Array.prototype.reduce = function(callback /*, initialValue*/) {\n    'use strict';\n    if (this == null) {\n      throw new TypeError('Array.prototype.reduce called on null or undefined');\n    }\n    if (typeof callback !== 'function') {\n      throw new TypeError(callback + ' is not a function');\n    }\n    var t = Object(this), len = t.length >>> 0, k = 0, value;\n    if (arguments.length == 2) {\n      value = arguments[1];\n    } else {\n      while (k < len && !(k in t)) {\n        k++;\n      }\n      if (k >= len) {\n        throw new TypeError('Reduce of empty array with no initial value');\n      }\n      value = t[k++];\n    }\n    for (; k < len; k++) {\n      if (k in t) {\n        value = callback(value, t[k], k, t);\n      }\n    }\n    return value;\n  };\n};\n"
  }
}